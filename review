#!/bin/zsh

n=$1

if [ -z "$n" ]; then
    echo "Usage: review <PR number>"
    exit 1
fi

# Checkout the PR
gh pr checkout --force $n

# If the checkout failed, exit
if [ $? -ne 0 ]; then
    echo "Checkout for $n failed"
    exit 1
fi

# Collect some information about the PR to put in the review note

url=$(gh pr view $n --json url -q '.url')

# Open the PR in a new browser window
osascript -e "tell application \"Safari\" to make new document with properties {URL:\"$url\"}"

# Get the repo name from gh command
repo=$(gh repo view --json name -q '.name')

# Can't use gh pr view --json files because it only returns the first 100 files
# see: https://github.com/cli/cli/issues/5368
# files=$(gh pr view $n --json files -q '.files[] | .path')

# This command returns a list of files directly (up to 3000)
files=$(gh api graphql -f query='
  query($owner: String!, $repo: String!, $pr: Int!, $endCursor: String) {
    repository(owner: $owner, name: $repo) {
      pullRequest(number: $pr) {
        files(first: 100, after: $endCursor) {
          pageInfo{ hasNextPage, endCursor }
          nodes {
            path
          }
        }
      }
    }
  }' -F owner='Azure' -F repo="${repo}" -F pr=$n --paginate --jq '.data.repository.pullRequest.files.nodes.[].path')

service=$(echo $files | grep 'specification/' | awk -F "/" '{print $2}' | sort | uniq)

apiVersion=$(echo $files | grep 'specification/' | grep -v 'examples/' | grep 'stable\|preview' |
  # Using # for sed delimiter since pattern needs both / and | \
  sed -E 's#.*/(preview|stable)/##' |
  awk -F "/" '{print $1}' | sort | tail -1)

{
    # AppleScript swallows the newlines so we need to use html breaks
    echo "<br/>$url<br/><br/>$service<br/><br/>$apiVersion<br/>"
    # More stuff to be added here
} | open-note "PR $n" "API Stewardship//REST API Reviews" 3<&0

jsonFiles=$(echo $files | grep 'specification/' | grep -v '/examples/' | grep '.json$')

# Open the OpenAPI files in VS Code
echo $jsonFiles | grep -v 'common' | read f; code . -g $f

echo $jsonFiles | while read f; do
    spectral lint $f
done
